#!/bin/bash

# github.com/bartonip/on-fleek
# Copyright (c) 2019 Barton Ip
# Released under the MIT licence: http://opensource.org/licenses/mit-license

echo
echo "=== https://github.com/bartonip/on-fleek ==="
echo

function exit_badly {
echo $1
exit 1
}

[[ $(lsb_release -rs) == "18.04" ]] || exit_badly "This script is for Ubuntu 18.04 only, aborting (if you know what you're doing, delete this check)."
[[ $(id -u) -eq 0 ]] || exit_badly "Please re-run as root (e.g. sudo ./path/to/this/script)"

echo "--- Install Components ---"
echo

wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
echo "deb https://artifacts.elastic.co/packages/6.x/apt stable main" >  /etc/apt/sources.list.d/elastic-6.x.list

apt update
apt install -y openjdk-11-jre 
apt install -y elasticsearch=6.7.2 kibana=6.7.2 logstash=1:6.7.2-1 filebeat=6.7.2 apm-server=6.7.2 
apt install -y nginx certbot python-certbot-nginx

sysctl -w vm.max_map_count=262144
echo 'vm.max_map_count=262144' >> /etc/sysctl.conf

grep -qxF 'network.host: localhost' /etc/elasticsearch/elasticsearch.yml || echo 'network.host: localhost' >> /etc/elasticsearch/elasticsearch.yml
sed -i 's/#bootstrap.memory_lock: true/bootstrap.memory_lock: true/g' /etc/elasticsearch/elasticsearch.yml

systemctl enable elasticsearch
systemctl start elasticsearch

systemctl enable kibana
systemctl start kibana


echo
echo "--- Configuration: Kibana Authentication Settings ---"
echo

DEFAULT_FQDN=$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
DEFAULT_KIBANA_USERNAME="root"

read -p "Username for Kibana Admin (default: ${DEFAULT_KIBANA_USERNAME}): " KIBANA_USERNAME
KIBANA_USERNAME=${KIBANA_USERNAME:-$DEFAULTKIBANAUSERNAME}
echo "${KIBANA_USERNAME}:`openssl passwd -apr1`" >> /etc/nginx/htpasswd.users 

read -p "FQDN for Kibana (default:${DEFAULT_FQDN}): " FQDN
FQDN=${FQDN:-$DEFAULT_FQDN}

echo  "
server {
    listen 80;

    server_name ${FQDN};

    auth_basic \"Restricted Access\";
    auth_basic_user_file /etc/nginx/htpasswd.users;

    location / {
        proxy_pass http://localhost:5601;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
" > /etc/nginx/sites-available/${FQDN}.conf

ln -s -f /etc/nginx/sites-available/${FQDN}.conf /etc/nginx/sites-enabled/${FQDN}.conf

echo
echo "--- Configuring RSA certificates ---"
echo

certbot --nginx --redirect --noninteractive  --agree-tos --register-unsafely-without-email -d ${FQDN}
(crontab -l 2>/dev/null; echo "43 6 * * * certbot renew --post-hook "systemctl reload nginx"") | crontab -

systemctl restart nginx

echo '
input {
beats {
    port => 5044
}
}
' > /etc/logstash/conf.d/02-beats-input.conf

echo '
filter {
if [fileset][module] == "system" {
    if [fileset][name] == "auth" {
    grok {
        match => { "message" => ["%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{DATA:[system][auth][ssh][method]} for (invalid user )?%{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]} ssh2(: %{GREEDYDATA:[system][auth][ssh][signature]})?",
                "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} user %{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]}",
                "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: Did not receive identification string from %{IPORHOST:[system][auth][ssh][dropped_ip]}",
                "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sudo(?:\[%{POSINT:[system][auth][pid]}\])?: \s*%{DATA:[system][auth][user]} :( %{DATA:[system][auth][sudo][error]} ;)? TTY=%{DATA:[system][auth][sudo][tty]} ; PWD=%{DATA:[system][auth][sudo][pwd]} ; USER=%{DATA:[system][auth][sudo][user]} ; COMMAND=%{GREEDYDATA:[system][auth][sudo][command]}",
                "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} groupadd(?:\[%{POSINT:[system][auth][pid]}\])?: new group: name=%{DATA:system.auth.groupadd.name}, GID=%{NUMBER:system.auth.groupadd.gid}",
                "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} useradd(?:\[%{POSINT:[system][auth][pid]}\])?: new user: name=%{DATA:[system][auth][user][add][name]}, UID=%{NUMBER:[system][auth][user][add][uid]}, GID=%{NUMBER:[system][auth][user][add][gid]}, home=%{DATA:[system][auth][user][add][home]}, shell=%{DATA:[system][auth][user][add][shell]}$",
                "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} %{DATA:[system][auth][program]}(?:\[%{POSINT:[system][auth][pid]}\])?: %{GREEDYMULTILINE:[system][auth][message]}"] }
        pattern_definitions => {
        "GREEDYMULTILINE"=> "(.|\n)*"
        }
        remove_field => "message"
    }
    date {
        match => [ "[system][auth][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    geoip {
        source => "[system][auth][ssh][ip]"
        target => "[system][auth][ssh][geoip]"
    }
    }
    else if [fileset][name] == "syslog" {
    grok {
        match => { "message" => ["%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{SYSLOGHOST:[system][syslog][hostname]} %{DATA:[system][syslog][program]}(?:\[%{POSINT:[system][syslog][pid]}\])?: %{GREEDYMULTILINE:[system][syslog][message]}"] }
        pattern_definitions => { "GREEDYMULTILINE" => "(.|\n)*" }
        remove_field => "message"
    }
    date {
        match => [ "[system][syslog][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    }
}
}
' > /etc/logstash/conf.d/10-syslog-filter.conf

echo '
output {
elasticsearch {
    hosts => ["localhost:9200"]
    manage_template => false
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
}
}
' > /etc/logstash/conf.d/30-elasticsearch-output.conf

systemctl start logstash
systemctl enable logstash

sed -i 's/output.elasticsearch:/#output.elasticsearch:/g' /etc/filebeat/filebeat.yml
sed -e '/\["localhost:9200"\]/ s/^#*/#/' -i /etc/filebeat/filebeat.yml

sed -i 's/#output.logstash:/output.logstash:/g' /etc/filebeat/filebeat.yml
sed -i 's/#hosts: ["localhost:5044"]/hosts: ["localhost:5044"]/g' /etc/filebeat/filebeat.yml

sleep 15

filebeat modules enable system
filebeat modules list

filebeat setup --template -E output.logstash.enabled=false -E 'output.elasticsearch.hosts=["localhost:9200"]'
filebeat setup -e -E output.logstash.enabled=false -E output.elasticsearch.hosts=['localhost:9200'] -E setup.kibana.host=localhost:5601

systemctl start filebeat
systemctl enable filebeat


sed -i 's/host: "localhost:8200"/host: "0.0.0.0:8200"/g' /etc/apm-server/apm-server.yml
apm-server setup
systemctl enable apm-server
systemctl restart apm-server
